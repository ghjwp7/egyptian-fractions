My egyptian-fractions repository contains programs and data files listed below.

These programs generate expansions of rational fractions into Egyptian
fraction representations.  For example, 5/9 = 1/2 + 1/18 = 1/3 + 1/6 + 1/18.

Program pracfracs.py uses "practical numbers" to find Egyptian
fraction representations.  More specifically, when given n, d, and
other parameters, it generates a series of numbers that it uses as
multipliers that let it readily form Egyptian fraction representations
of n/d.  Number m is practical if for any j<m, some distinct divisors
of m add up to j.  Thus, suppose u = m*d is practical and that
distinct divisors (d1, d2, d3, ...) of u add up to m*n.  Then n/d =
m*n/(m*d) = m*n/u = (d1+d2+d3+...)/u, hence d1/u + d2/u + d3/u +
... is an Egyptian fraction for n/d, because the di are distinct and
each di/u reduces to a fraction with numerator 1.  pracfracs.py isn't
exhaustive in its coverage, nor is it clear what it would take to make
it exhaustive.

Program kterms.py exhaustively computes expansions with up to kHi
terms.  The first three command-line parameters for this program are
n, d, and kHi.  Example: ./kterms.py 5 19 2 finds all the two-term
expansions of 5/19, outputting a line like "5/19: [[4, 76]] in 8 us".
Example: ./kterms.py 5 19 3 finds all the two- or three-term
expansions of 5/19, outputting a line like "5/19: [[4, 76], [5, 16,
1520], [5, 19, 95], [5, 20, 76], [6, 12, 76]] in 64 us".  Example:
./kterms.py 5 19 4 in about 44 ms finds 65 two-to-four term expansions
of 5/19.

kterms.py rapidly bogs down as d or kHi increase.  Some example
outputs illustrating this appear in files with names like n4d17k3,
n6d19k4, etc, that encode the n, d, and k values used as parameters.
For example, n13d1179 shows that kterms.py took 561815897 us (about
9.4 minutes) to find 76 3-term expansions of 13/1179.  In contrast,
pracfracs.py takes about 1 second to find 21 solutions, 4 seconds to
find 34 solutions, 16 seconds to find 40 solutions, 40 seconds to find
50 solutions, etc.

Program 3terms.py exhaustively computes 1, 2, or 3-term expansions of
its input, printing denominator lists one set per line; eg, "2 18" and
"3 6 18".  Its execution time probably is quadratic, O(d*d) for input
n/d.
